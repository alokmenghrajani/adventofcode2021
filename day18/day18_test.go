package day18

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestPart1(t *testing.T) {
	assert.Equal(t, "[[[[0,7],4],[[7,8],[6,0]]],[8,1]]", testSum(`[[[[4,3],4],4],[7,[[8,4],9]]]
[1,1]`))

	assert.Equal(t, "[[[[1,1],[2,2]],[3,3]],[4,4]]", testSum(`[1,1]
[2,2]
[3,3]
[4,4]`))

	assert.Equal(t, "[[[[3,0],[5,3]],[4,4]],[5,5]]", testSum(`[1,1]
[2,2]
[3,3]
[4,4]
[5,5]`))

	assert.Equal(t, "[[[[5,0],[7,4]],[5,5]],[6,6]]", testSum(`[1,1]
[2,2]
[3,3]
[4,4]
[5,5]
[6,6]`))

	assert.Equal(t, "[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]", testSum(`[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]
[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]
[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]
[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]
[7,[5,[[3,8],[1,4]]]]
[[2,[2,2]],[8,[8,1]]]
[2,9]
[1,[[[9,3],9],[[9,0],[0,7]]]]
[[[5,[7,4]],7],1]
[[[[4,2],2],6],[8,7]]`))

	assert.Equal(t, 29, testMag(`[9,1]`))
	assert.Equal(t, 21, testMag(`[1,9]`))
	assert.Equal(t, 129, testMag(`[[9,1],[1,9]]`))
	assert.Equal(t, 143, testMag("[[1,2],[[3,4],5]]"))
	assert.Equal(t, 1384, testMag("[[[[0,7],4],[[7,8],[6,0]]],[8,1]]"))
	assert.Equal(t, 445, testMag("[[[[1,1],[2,2]],[3,3]],[4,4]]"))
	assert.Equal(t, 791, testMag("[[[[3,0],[5,3]],[4,4]],[5,5]]"))
	assert.Equal(t, 1137, testMag("[[[[5,0],[7,4]],[5,5]],[6,6]]"))
	assert.Equal(t, 3488, testMag("[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]"))

	assert.Equal(t, "[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]", testSum(`[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[9,3],[[9,9],[6,[4,9]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]`))

	assert.Equal(t, 4140, Part1(`[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[9,3],[[9,9],[6,[4,9]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]`))
}

func TestPart2(t *testing.T) {
	assert.Equal(t, 3993, Part2(`[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]
[[[5,[2,8]],4],[5,[[9,9],0]]]
[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]
[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]
[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]
[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]
[[[[5,4],[7,7]],8],[[8,3],8]]
[[9,3],[[9,9],[6,[4,9]]]]
[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]
[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]`))
}

func TestExplode(t *testing.T) {
	p := mustParse("[[[[[9,8],1],2],3],4]")
	explode(p, p.left.left.left.left)
	assert.Equal(t, "[[[[0,9],2],3],4]", p.String())

	p = mustParse("[7,[6,[5,[4,[3,2]]]]]")
	explode(p, p.right.right.right.right)
	assert.Equal(t, "[7,[6,[5,[7,0]]]]", p.String())

	p = mustParse("[[6,[5,[4,[3,2]]]],1]")
	explode(p, p.left.right.right.right)
	assert.Equal(t, "[[6,[5,[7,0]]],3]", p.String())

	p = mustParse("[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]")
	explode(p, p.left.right.right.right)
	assert.Equal(t, "[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]", p.String())

	p = mustParse("[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]")
	explode(p, p.right.right.right.right)
	assert.Equal(t, "[[3,[2,[8,0]]],[9,[5,[7,0]]]]", p.String())

}

func testSum(input string) string {
	p := sumAll(input)
	return p.String()
}

func testMag(input string) int {
	t := mustParse(input)
	return mag(t)
}
